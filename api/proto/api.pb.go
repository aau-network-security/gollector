// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type StartMeasurementResponse struct {
	MeasurementId        *MeasurementId `protobuf:"bytes,1,opt,name=MeasurementId,proto3" json:"MeasurementId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *StartMeasurementResponse) Reset()         { *m = StartMeasurementResponse{} }
func (m *StartMeasurementResponse) String() string { return proto.CompactTextString(m) }
func (*StartMeasurementResponse) ProtoMessage()    {}
func (*StartMeasurementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *StartMeasurementResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartMeasurementResponse.Unmarshal(m, b)
}
func (m *StartMeasurementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartMeasurementResponse.Marshal(b, m, deterministic)
}
func (m *StartMeasurementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartMeasurementResponse.Merge(m, src)
}
func (m *StartMeasurementResponse) XXX_Size() int {
	return xxx_messageInfo_StartMeasurementResponse.Size(m)
}
func (m *StartMeasurementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartMeasurementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartMeasurementResponse proto.InternalMessageInfo

func (m *StartMeasurementResponse) GetMeasurementId() *MeasurementId {
	if m != nil {
		return m.MeasurementId
	}
	return nil
}

type Meta struct {
	Description          string   `protobuf:"bytes,1,opt,name=Description,proto3" json:"Description,omitempty"`
	Host                 string   `protobuf:"bytes,2,opt,name=Host,proto3" json:"Host,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Meta) Reset()         { *m = Meta{} }
func (m *Meta) String() string { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()    {}
func (*Meta) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *Meta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Meta.Unmarshal(m, b)
}
func (m *Meta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Meta.Marshal(b, m, deterministic)
}
func (m *Meta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Meta.Merge(m, src)
}
func (m *Meta) XXX_Size() int {
	return xxx_messageInfo_Meta.Size(m)
}
func (m *Meta) XXX_DiscardUnknown() {
	xxx_messageInfo_Meta.DiscardUnknown(m)
}

var xxx_messageInfo_Meta proto.InternalMessageInfo

func (m *Meta) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Meta) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type MeasurementId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeasurementId) Reset()         { *m = MeasurementId{} }
func (m *MeasurementId) String() string { return proto.CompactTextString(m) }
func (*MeasurementId) ProtoMessage()    {}
func (*MeasurementId) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *MeasurementId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeasurementId.Unmarshal(m, b)
}
func (m *MeasurementId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeasurementId.Marshal(b, m, deterministic)
}
func (m *MeasurementId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeasurementId.Merge(m, src)
}
func (m *MeasurementId) XXX_Size() int {
	return xxx_messageInfo_MeasurementId.Size(m)
}
func (m *MeasurementId) XXX_DiscardUnknown() {
	xxx_messageInfo_MeasurementId.DiscardUnknown(m)
}

var xxx_messageInfo_MeasurementId proto.InternalMessageInfo

func (m *MeasurementId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type LogEntryBatch struct {
	LogEntries           []*LogEntry `protobuf:"bytes,1,rep,name=LogEntries,proto3" json:"LogEntries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *LogEntryBatch) Reset()         { *m = LogEntryBatch{} }
func (m *LogEntryBatch) String() string { return proto.CompactTextString(m) }
func (*LogEntryBatch) ProtoMessage()    {}
func (*LogEntryBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *LogEntryBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogEntryBatch.Unmarshal(m, b)
}
func (m *LogEntryBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogEntryBatch.Marshal(b, m, deterministic)
}
func (m *LogEntryBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntryBatch.Merge(m, src)
}
func (m *LogEntryBatch) XXX_Size() int {
	return xxx_messageInfo_LogEntryBatch.Size(m)
}
func (m *LogEntryBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntryBatch.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntryBatch proto.InternalMessageInfo

func (m *LogEntryBatch) GetLogEntries() []*LogEntry {
	if m != nil {
		return m.LogEntries
	}
	return nil
}

type LogEntry struct {
	Certificate          []byte   `protobuf:"bytes,1,opt,name=Certificate,proto3" json:"Certificate,omitempty"`
	Index                int64    `protobuf:"varint,2,opt,name=Index,proto3" json:"Index,omitempty"`
	Timestamp            int64    `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Log                  *Log     `protobuf:"bytes,4,opt,name=Log,proto3" json:"Log,omitempty"`
	IsPrecert            bool     `protobuf:"varint,5,opt,name=IsPrecert,proto3" json:"IsPrecert,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}
func (*LogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *LogEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogEntry.Unmarshal(m, b)
}
func (m *LogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogEntry.Marshal(b, m, deterministic)
}
func (m *LogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntry.Merge(m, src)
}
func (m *LogEntry) XXX_Size() int {
	return xxx_messageInfo_LogEntry.Size(m)
}
func (m *LogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntry proto.InternalMessageInfo

func (m *LogEntry) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *LogEntry) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LogEntry) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *LogEntry) GetLog() *Log {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *LogEntry) GetIsPrecert() bool {
	if m != nil {
		return m.IsPrecert
	}
	return false
}

type Log struct {
	Description          string   `protobuf:"bytes,1,opt,name=Description,proto3" json:"Description,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	Url                  string   `protobuf:"bytes,3,opt,name=Url,proto3" json:"Url,omitempty"`
	MaximumMergeDelay    int64    `protobuf:"varint,4,opt,name=MaximumMergeDelay,proto3" json:"MaximumMergeDelay,omitempty"`
	OperatedBy           []int64  `protobuf:"varint,5,rep,packed,name=OperatedBy,proto3" json:"OperatedBy,omitempty"`
	DnsApiEndpoint       string   `protobuf:"bytes,6,opt,name=DnsApiEndpoint,proto3" json:"DnsApiEndpoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}

func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Log) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Log) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Log) GetMaximumMergeDelay() int64 {
	if m != nil {
		return m.MaximumMergeDelay
	}
	return 0
}

func (m *Log) GetOperatedBy() []int64 {
	if m != nil {
		return m.OperatedBy
	}
	return nil
}

func (m *Log) GetDnsApiEndpoint() string {
	if m != nil {
		return m.DnsApiEndpoint
	}
	return ""
}

type KnownLogURL struct {
	LogURL               string   `protobuf:"bytes,1,opt,name=LogURL,proto3" json:"LogURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KnownLogURL) Reset()         { *m = KnownLogURL{} }
func (m *KnownLogURL) String() string { return proto.CompactTextString(m) }
func (*KnownLogURL) ProtoMessage()    {}
func (*KnownLogURL) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}

func (m *KnownLogURL) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KnownLogURL.Unmarshal(m, b)
}
func (m *KnownLogURL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KnownLogURL.Marshal(b, m, deterministic)
}
func (m *KnownLogURL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnownLogURL.Merge(m, src)
}
func (m *KnownLogURL) XXX_Size() int {
	return xxx_messageInfo_KnownLogURL.Size(m)
}
func (m *KnownLogURL) XXX_DiscardUnknown() {
	xxx_messageInfo_KnownLogURL.DiscardUnknown(m)
}

var xxx_messageInfo_KnownLogURL proto.InternalMessageInfo

func (m *KnownLogURL) GetLogURL() string {
	if m != nil {
		return m.LogURL
	}
	return ""
}

type Index struct {
	Start                int64    `protobuf:"varint,1,opt,name=Start,proto3" json:"Start,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Index) Reset()         { *m = Index{} }
func (m *Index) String() string { return proto.CompactTextString(m) }
func (*Index) ProtoMessage()    {}
func (*Index) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}

func (m *Index) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Index.Unmarshal(m, b)
}
func (m *Index) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Index.Marshal(b, m, deterministic)
}
func (m *Index) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Index.Merge(m, src)
}
func (m *Index) XXX_Size() int {
	return xxx_messageInfo_Index.Size(m)
}
func (m *Index) XXX_DiscardUnknown() {
	xxx_messageInfo_Index.DiscardUnknown(m)
}

var xxx_messageInfo_Index proto.InternalMessageInfo

func (m *Index) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

type Interval struct {
	Interval             int64    `protobuf:"varint,1,opt,name=Interval,proto3" json:"Interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Interval) Reset()         { *m = Interval{} }
func (m *Interval) String() string { return proto.CompactTextString(m) }
func (*Interval) ProtoMessage()    {}
func (*Interval) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}

func (m *Interval) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Interval.Unmarshal(m, b)
}
func (m *Interval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Interval.Marshal(b, m, deterministic)
}
func (m *Interval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interval.Merge(m, src)
}
func (m *Interval) XXX_Size() int {
	return xxx_messageInfo_Interval.Size(m)
}
func (m *Interval) XXX_DiscardUnknown() {
	xxx_messageInfo_Interval.DiscardUnknown(m)
}

var xxx_messageInfo_Interval proto.InternalMessageInfo

func (m *Interval) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

type StartTime struct {
	Timestamp            int64    `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartTime) Reset()         { *m = StartTime{} }
func (m *StartTime) String() string { return proto.CompactTextString(m) }
func (*StartTime) ProtoMessage()    {}
func (*StartTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}

func (m *StartTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartTime.Unmarshal(m, b)
}
func (m *StartTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartTime.Marshal(b, m, deterministic)
}
func (m *StartTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartTime.Merge(m, src)
}
func (m *StartTime) XXX_Size() int {
	return xxx_messageInfo_StartTime.Size(m)
}
func (m *StartTime) XXX_DiscardUnknown() {
	xxx_messageInfo_StartTime.DiscardUnknown(m)
}

var xxx_messageInfo_StartTime proto.InternalMessageInfo

func (m *StartTime) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type ZoneEntryBatch struct {
	ZoneEntries          []*ZoneEntry `protobuf:"bytes,1,rep,name=ZoneEntries,proto3" json:"ZoneEntries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ZoneEntryBatch) Reset()         { *m = ZoneEntryBatch{} }
func (m *ZoneEntryBatch) String() string { return proto.CompactTextString(m) }
func (*ZoneEntryBatch) ProtoMessage()    {}
func (*ZoneEntryBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}

func (m *ZoneEntryBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZoneEntryBatch.Unmarshal(m, b)
}
func (m *ZoneEntryBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZoneEntryBatch.Marshal(b, m, deterministic)
}
func (m *ZoneEntryBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZoneEntryBatch.Merge(m, src)
}
func (m *ZoneEntryBatch) XXX_Size() int {
	return xxx_messageInfo_ZoneEntryBatch.Size(m)
}
func (m *ZoneEntryBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_ZoneEntryBatch.DiscardUnknown(m)
}

var xxx_messageInfo_ZoneEntryBatch proto.InternalMessageInfo

func (m *ZoneEntryBatch) GetZoneEntries() []*ZoneEntry {
	if m != nil {
		return m.ZoneEntries
	}
	return nil
}

type ZoneEntry struct {
	Apex                 string   `protobuf:"bytes,1,opt,name=Apex,proto3" json:"Apex,omitempty"`
	Timestamp            int64    `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZoneEntry) Reset()         { *m = ZoneEntry{} }
func (m *ZoneEntry) String() string { return proto.CompactTextString(m) }
func (*ZoneEntry) ProtoMessage()    {}
func (*ZoneEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}

func (m *ZoneEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZoneEntry.Unmarshal(m, b)
}
func (m *ZoneEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZoneEntry.Marshal(b, m, deterministic)
}
func (m *ZoneEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZoneEntry.Merge(m, src)
}
func (m *ZoneEntry) XXX_Size() int {
	return xxx_messageInfo_ZoneEntry.Size(m)
}
func (m *ZoneEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ZoneEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ZoneEntry proto.InternalMessageInfo

func (m *ZoneEntry) GetApex() string {
	if m != nil {
		return m.Apex
	}
	return ""
}

func (m *ZoneEntry) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type Result struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *Result) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type SplunkEntryBatch struct {
	SplunkEntries        []*SplunkEntry `protobuf:"bytes,1,rep,name=SplunkEntries,proto3" json:"SplunkEntries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SplunkEntryBatch) Reset()         { *m = SplunkEntryBatch{} }
func (m *SplunkEntryBatch) String() string { return proto.CompactTextString(m) }
func (*SplunkEntryBatch) ProtoMessage()    {}
func (*SplunkEntryBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}

func (m *SplunkEntryBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SplunkEntryBatch.Unmarshal(m, b)
}
func (m *SplunkEntryBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SplunkEntryBatch.Marshal(b, m, deterministic)
}
func (m *SplunkEntryBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplunkEntryBatch.Merge(m, src)
}
func (m *SplunkEntryBatch) XXX_Size() int {
	return xxx_messageInfo_SplunkEntryBatch.Size(m)
}
func (m *SplunkEntryBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_SplunkEntryBatch.DiscardUnknown(m)
}

var xxx_messageInfo_SplunkEntryBatch proto.InternalMessageInfo

func (m *SplunkEntryBatch) GetSplunkEntries() []*SplunkEntry {
	if m != nil {
		return m.SplunkEntries
	}
	return nil
}

type SplunkEntry struct {
	Query                string   `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
	QueryType            string   `protobuf:"bytes,2,opt,name=QueryType,proto3" json:"QueryType,omitempty"`
	Timestamp            int64    `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SplunkEntry) Reset()         { *m = SplunkEntry{} }
func (m *SplunkEntry) String() string { return proto.CompactTextString(m) }
func (*SplunkEntry) ProtoMessage()    {}
func (*SplunkEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}

func (m *SplunkEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SplunkEntry.Unmarshal(m, b)
}
func (m *SplunkEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SplunkEntry.Marshal(b, m, deterministic)
}
func (m *SplunkEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplunkEntry.Merge(m, src)
}
func (m *SplunkEntry) XXX_Size() int {
	return xxx_messageInfo_SplunkEntry.Size(m)
}
func (m *SplunkEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_SplunkEntry.DiscardUnknown(m)
}

var xxx_messageInfo_SplunkEntry proto.InternalMessageInfo

func (m *SplunkEntry) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *SplunkEntry) GetQueryType() string {
	if m != nil {
		return m.QueryType
	}
	return ""
}

func (m *SplunkEntry) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type EntradaEntryBatch struct {
	EntradaEntries       []*EntradaEntry `protobuf:"bytes,1,rep,name=EntradaEntries,proto3" json:"EntradaEntries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *EntradaEntryBatch) Reset()         { *m = EntradaEntryBatch{} }
func (m *EntradaEntryBatch) String() string { return proto.CompactTextString(m) }
func (*EntradaEntryBatch) ProtoMessage()    {}
func (*EntradaEntryBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}

func (m *EntradaEntryBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntradaEntryBatch.Unmarshal(m, b)
}
func (m *EntradaEntryBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntradaEntryBatch.Marshal(b, m, deterministic)
}
func (m *EntradaEntryBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntradaEntryBatch.Merge(m, src)
}
func (m *EntradaEntryBatch) XXX_Size() int {
	return xxx_messageInfo_EntradaEntryBatch.Size(m)
}
func (m *EntradaEntryBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_EntradaEntryBatch.DiscardUnknown(m)
}

var xxx_messageInfo_EntradaEntryBatch proto.InternalMessageInfo

func (m *EntradaEntryBatch) GetEntradaEntries() []*EntradaEntry {
	if m != nil {
		return m.EntradaEntries
	}
	return nil
}

type EntradaEntry struct {
	Fqdn                 string   `protobuf:"bytes,1,opt,name=Fqdn,proto3" json:"Fqdn,omitempty"`
	Timestamp            int64    `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntradaEntry) Reset()         { *m = EntradaEntry{} }
func (m *EntradaEntry) String() string { return proto.CompactTextString(m) }
func (*EntradaEntry) ProtoMessage()    {}
func (*EntradaEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}

func (m *EntradaEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntradaEntry.Unmarshal(m, b)
}
func (m *EntradaEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntradaEntry.Marshal(b, m, deterministic)
}
func (m *EntradaEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntradaEntry.Merge(m, src)
}
func (m *EntradaEntry) XXX_Size() int {
	return xxx_messageInfo_EntradaEntry.Size(m)
}
func (m *EntradaEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_EntradaEntry.DiscardUnknown(m)
}

var xxx_messageInfo_EntradaEntry proto.InternalMessageInfo

func (m *EntradaEntry) GetFqdn() string {
	if m != nil {
		return m.Fqdn
	}
	return ""
}

func (m *EntradaEntry) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*StartMeasurementResponse)(nil), "StartMeasurementResponse")
	proto.RegisterType((*Meta)(nil), "Meta")
	proto.RegisterType((*MeasurementId)(nil), "MeasurementId")
	proto.RegisterType((*LogEntryBatch)(nil), "LogEntryBatch")
	proto.RegisterType((*LogEntry)(nil), "LogEntry")
	proto.RegisterType((*Log)(nil), "Log")
	proto.RegisterType((*KnownLogURL)(nil), "KnownLogURL")
	proto.RegisterType((*Index)(nil), "Index")
	proto.RegisterType((*Interval)(nil), "Interval")
	proto.RegisterType((*StartTime)(nil), "StartTime")
	proto.RegisterType((*ZoneEntryBatch)(nil), "ZoneEntryBatch")
	proto.RegisterType((*ZoneEntry)(nil), "ZoneEntry")
	proto.RegisterType((*Result)(nil), "Result")
	proto.RegisterType((*SplunkEntryBatch)(nil), "SplunkEntryBatch")
	proto.RegisterType((*SplunkEntry)(nil), "SplunkEntry")
	proto.RegisterType((*EntradaEntryBatch)(nil), "EntradaEntryBatch")
	proto.RegisterType((*EntradaEntry)(nil), "EntradaEntry")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 784 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdf, 0x6f, 0xeb, 0x34,
	0x14, 0x6e, 0x9a, 0xb6, 0xb7, 0x39, 0x6d, 0x73, 0x57, 0x0b, 0x5d, 0x85, 0x8a, 0x1f, 0x95, 0xa5,
	0x3b, 0x7a, 0xc5, 0x95, 0x35, 0x05, 0xc6, 0x03, 0x02, 0xc4, 0xba, 0x76, 0xa3, 0xac, 0xd5, 0x86,
	0xbb, 0xbd, 0xf0, 0x82, 0x4c, 0x6b, 0xba, 0x68, 0x6d, 0x12, 0x1c, 0x77, 0xac, 0xff, 0x08, 0xff,
	0x0f, 0x12, 0x7f, 0x18, 0xb2, 0x93, 0x36, 0x4e, 0x26, 0x06, 0x6f, 0xc7, 0xdf, 0x39, 0xf6, 0xf7,
	0xe5, 0xf8, 0xf3, 0x09, 0x38, 0x2c, 0x0e, 0x48, 0x2c, 0x22, 0x19, 0xe1, 0x57, 0x50, 0x1f, 0x6f,
	0x62, 0xb9, 0xc3, 0x37, 0xe0, 0xcd, 0x25, 0x13, 0x72, 0xc6, 0x59, 0xb2, 0x15, 0x7c, 0xc3, 0x43,
	0x49, 0x79, 0x12, 0x47, 0x61, 0xc2, 0xd1, 0x97, 0xd0, 0x31, 0xe0, 0xc9, 0xd2, 0xb3, 0xfa, 0xd6,
	0xa0, 0xe5, 0xbb, 0xa4, 0x80, 0xd2, 0x62, 0x11, 0xfe, 0x06, 0x6a, 0x33, 0x2e, 0x19, 0xea, 0x43,
	0x6b, 0xc4, 0x93, 0x85, 0x08, 0x62, 0x19, 0x44, 0xa1, 0xde, 0xeb, 0x50, 0x13, 0x42, 0x08, 0x6a,
	0x3f, 0x44, 0x89, 0xf4, 0xaa, 0x3a, 0xa5, 0x63, 0xfc, 0x69, 0x89, 0x13, 0xb9, 0x50, 0xcd, 0x98,
	0x1d, 0x5a, 0x9d, 0x2c, 0xf1, 0xd7, 0xd0, 0x99, 0x46, 0xab, 0x71, 0x28, 0xc5, 0x6e, 0xc8, 0xe4,
	0xe2, 0x1e, 0xbd, 0x03, 0xc8, 0x80, 0x80, 0x27, 0x9e, 0xd5, 0xb7, 0x07, 0x2d, 0xdf, 0x21, 0xfb,
	0x1a, 0x6a, 0x24, 0xf1, 0x9f, 0x16, 0x34, 0xf7, 0x09, 0xa5, 0xef, 0x9c, 0x0b, 0x19, 0xfc, 0x16,
	0x2c, 0x98, 0xe4, 0x9a, 0xa1, 0x4d, 0x4d, 0x08, 0x7d, 0x00, 0xf5, 0x49, 0xb8, 0xe4, 0x4f, 0x5a,
	0xa0, 0x4d, 0xd3, 0x05, 0xfa, 0x08, 0x9c, 0xdb, 0x60, 0xc3, 0x13, 0xc9, 0x36, 0xb1, 0x67, 0xeb,
	0x4c, 0x0e, 0xa0, 0x37, 0x60, 0x4f, 0xa3, 0x95, 0x57, 0xd3, 0x9d, 0xaa, 0x29, 0x19, 0x54, 0x01,
	0x6a, 0xd7, 0x24, 0xb9, 0x11, 0x7c, 0xc1, 0x85, 0xf4, 0xea, 0x7d, 0x6b, 0xd0, 0xa4, 0x39, 0x80,
	0xff, 0xb2, 0xf4, 0xb6, 0xff, 0xd1, 0xb3, 0x23, 0xb0, 0xaf, 0xf8, 0x2e, 0x6b, 0x99, 0x0a, 0x15,
	0x72, 0x27, 0xd6, 0x5a, 0x89, 0x43, 0x55, 0x88, 0xde, 0x43, 0x77, 0xc6, 0x9e, 0x82, 0xcd, 0x76,
	0x33, 0xe3, 0x62, 0xc5, 0x47, 0x7c, 0xcd, 0x76, 0x5a, 0x91, 0x4d, 0x9f, 0x27, 0xd0, 0x27, 0x00,
	0xd7, 0x31, 0x17, 0x4c, 0xf2, 0xe5, 0x70, 0xe7, 0xd5, 0xfb, 0xf6, 0xc0, 0xa6, 0x06, 0x82, 0x8e,
	0xc1, 0x1d, 0x85, 0xc9, 0x59, 0x1c, 0x8c, 0xc3, 0x65, 0x1c, 0x05, 0xa1, 0xf4, 0x1a, 0x9a, 0xaa,
	0x84, 0xe2, 0xb7, 0xd0, 0xba, 0x0a, 0xa3, 0x3f, 0xc2, 0x69, 0xb4, 0xba, 0xa3, 0x53, 0xf4, 0x06,
	0x1a, 0x69, 0x94, 0x7d, 0x45, 0xb6, 0xc2, 0x1f, 0x67, 0x4d, 0x55, 0xdd, 0xd5, 0xce, 0xd3, 0x79,
	0x9b, 0xa6, 0x0b, 0x7c, 0x0c, 0xcd, 0x49, 0x28, 0xb9, 0x78, 0x64, 0x6b, 0xd4, 0xcb, 0xe3, 0xac,
	0xe8, 0xb0, 0xc6, 0xef, 0xc0, 0xd1, 0x1b, 0x54, 0xe7, 0x8b, 0x57, 0x62, 0x95, 0xae, 0x04, 0x7f,
	0x07, 0xee, 0xcf, 0x51, 0xc8, 0x0d, 0xcb, 0xbc, 0x87, 0xd6, 0x1e, 0xc9, 0x3d, 0x03, 0xe4, 0x50,
	0x45, 0xcd, 0x34, 0xfe, 0x16, 0x9c, 0x43, 0x46, 0x79, 0xf6, 0x2c, 0xe6, 0x4f, 0xd9, 0x47, 0xe9,
	0xb8, 0x48, 0x5f, 0x2d, 0xd3, 0x13, 0x68, 0x50, 0x9e, 0x6c, 0xd7, 0x52, 0x59, 0xf9, 0xfa, 0x41,
	0xef, 0x6c, 0xd2, 0xea, 0xf5, 0x83, 0xea, 0xc0, 0x58, 0x88, 0x48, 0x64, 0xb7, 0x99, 0x2e, 0xf0,
	0x05, 0x1c, 0xcd, 0xe3, 0xf5, 0x36, 0x7c, 0x30, 0x04, 0xfb, 0xd0, 0xc9, 0xb1, 0x5c, 0x72, 0x9b,
	0x18, 0x95, 0xb4, 0x58, 0x82, 0x7f, 0x81, 0x96, 0x91, 0x55, 0x64, 0x3f, 0x6d, 0xb9, 0xd8, 0x65,
	0xca, 0xd3, 0x85, 0x92, 0xae, 0x83, 0xdb, 0x5d, 0xcc, 0x33, 0x19, 0x39, 0xf0, 0xb2, 0xd5, 0xf1,
	0x8f, 0xd0, 0x55, 0x47, 0xb3, 0x25, 0x33, 0x94, 0x9e, 0x82, 0x6b, 0x80, 0xb9, 0xd4, 0x0e, 0x31,
	0x6b, 0x69, 0xa9, 0x08, 0x7f, 0x0f, 0x6d, 0x33, 0xaf, 0xda, 0x7c, 0xf1, 0xfb, 0x72, 0xff, 0x02,
	0x74, 0xfc, 0x72, 0x9b, 0xfd, 0xbf, 0x2d, 0x70, 0x8d, 0xc9, 0x71, 0x16, 0x07, 0xe8, 0x2b, 0x38,
	0x2a, 0xcf, 0x36, 0x54, 0x27, 0x6a, 0x38, 0xf5, 0x3e, 0x24, 0xff, 0x36, 0xf5, 0x70, 0x05, 0x7d,
	0x0e, 0xaf, 0xe7, 0x32, 0x8a, 0xcd, 0x6d, 0xa5, 0x99, 0xd7, 0x6b, 0x90, 0x74, 0x7c, 0x56, 0xd0,
	0x31, 0x80, 0x3e, 0x6a, 0x2e, 0xd9, 0x8a, 0xbf, 0x50, 0xf7, 0x56, 0x19, 0x36, 0x8a, 0xff, 0xa3,
	0xcc, 0x5f, 0x40, 0xfd, 0x5c, 0x8b, 0x3f, 0xd1, 0x22, 0x04, 0xcf, 0xc7, 0x17, 0x72, 0x49, 0x61,
	0xf2, 0xf5, 0x5e, 0x91, 0xd4, 0x58, 0xb8, 0x32, 0xb0, 0x4e, 0x2c, 0x34, 0x00, 0xf7, 0x92, 0xcb,
	0x29, 0x4b, 0xe4, 0x68, 0x98, 0x76, 0xb1, 0x4d, 0x8c, 0x17, 0xd9, 0x6b, 0x10, 0xfd, 0xf0, 0x70,
	0xc5, 0xbf, 0x4f, 0xfd, 0x7f, 0x11, 0xac, 0x79, 0x4a, 0xe5, 0x6a, 0xaa, 0xdc, 0xe5, 0xaf, 0x49,
	0xf1, 0xc5, 0x94, 0xa9, 0x3e, 0x83, 0xf6, 0x25, 0x97, 0xf9, 0x03, 0x74, 0xc8, 0xfe, 0x61, 0xf6,
	0x80, 0x1c, 0x60, 0x5c, 0xf1, 0x87, 0xe0, 0xa4, 0x26, 0x54, 0x3c, 0xa7, 0xd0, 0xd5, 0x3c, 0x37,
	0x2c, 0x49, 0x82, 0xc7, 0x8c, 0xaa, 0x4b, 0xca, 0x6e, 0x2f, 0x91, 0xf9, 0x23, 0x80, 0xcc, 0x1b,
	0xe9, 0xa5, 0xa6, 0x87, 0x14, 0xed, 0x42, 0x9e, 0x39, 0xb1, 0x74, 0xca, 0xaf, 0x0d, 0xfd, 0xe3,
	0xfb, 0xe2, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x60, 0xdb, 0xa1, 0x05, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MeasurementApiClient is the client API for MeasurementApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MeasurementApiClient interface {
	StartMeasurement(ctx context.Context, in *Meta, opts ...grpc.CallOption) (*StartMeasurementResponse, error)
	StopMeasurement(ctx context.Context, in *MeasurementId, opts ...grpc.CallOption) (*Empty, error)
	StartStage(ctx context.Context, in *MeasurementId, opts ...grpc.CallOption) (*Empty, error)
	StopStage(ctx context.Context, in *MeasurementId, opts ...grpc.CallOption) (*Empty, error)
}

type measurementApiClient struct {
	cc *grpc.ClientConn
}

func NewMeasurementApiClient(cc *grpc.ClientConn) MeasurementApiClient {
	return &measurementApiClient{cc}
}

func (c *measurementApiClient) StartMeasurement(ctx context.Context, in *Meta, opts ...grpc.CallOption) (*StartMeasurementResponse, error) {
	out := new(StartMeasurementResponse)
	err := c.cc.Invoke(ctx, "/MeasurementApi/StartMeasurement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measurementApiClient) StopMeasurement(ctx context.Context, in *MeasurementId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/MeasurementApi/StopMeasurement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measurementApiClient) StartStage(ctx context.Context, in *MeasurementId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/MeasurementApi/StartStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measurementApiClient) StopStage(ctx context.Context, in *MeasurementId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/MeasurementApi/StopStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeasurementApiServer is the server API for MeasurementApi service.
type MeasurementApiServer interface {
	StartMeasurement(context.Context, *Meta) (*StartMeasurementResponse, error)
	StopMeasurement(context.Context, *MeasurementId) (*Empty, error)
	StartStage(context.Context, *MeasurementId) (*Empty, error)
	StopStage(context.Context, *MeasurementId) (*Empty, error)
}

// UnimplementedMeasurementApiServer can be embedded to have forward compatible implementations.
type UnimplementedMeasurementApiServer struct {
}

func (*UnimplementedMeasurementApiServer) StartMeasurement(ctx context.Context, req *Meta) (*StartMeasurementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMeasurement not implemented")
}
func (*UnimplementedMeasurementApiServer) StopMeasurement(ctx context.Context, req *MeasurementId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopMeasurement not implemented")
}
func (*UnimplementedMeasurementApiServer) StartStage(ctx context.Context, req *MeasurementId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStage not implemented")
}
func (*UnimplementedMeasurementApiServer) StopStage(ctx context.Context, req *MeasurementId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopStage not implemented")
}

func RegisterMeasurementApiServer(s *grpc.Server, srv MeasurementApiServer) {
	s.RegisterService(&_MeasurementApi_serviceDesc, srv)
}

func _MeasurementApi_StartMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Meta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasurementApiServer).StartMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MeasurementApi/StartMeasurement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasurementApiServer).StartMeasurement(ctx, req.(*Meta))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeasurementApi_StopMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeasurementId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasurementApiServer).StopMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MeasurementApi/StopMeasurement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasurementApiServer).StopMeasurement(ctx, req.(*MeasurementId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeasurementApi_StartStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeasurementId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasurementApiServer).StartStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MeasurementApi/StartStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasurementApiServer).StartStage(ctx, req.(*MeasurementId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeasurementApi_StopStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeasurementId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasurementApiServer).StopStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MeasurementApi/StopStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasurementApiServer).StopStage(ctx, req.(*MeasurementId))
	}
	return interceptor(ctx, in, info, handler)
}

var _MeasurementApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MeasurementApi",
	HandlerType: (*MeasurementApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartMeasurement",
			Handler:    _MeasurementApi_StartMeasurement_Handler,
		},
		{
			MethodName: "StopMeasurement",
			Handler:    _MeasurementApi_StopMeasurement_Handler,
		},
		{
			MethodName: "StartStage",
			Handler:    _MeasurementApi_StartStage_Handler,
		},
		{
			MethodName: "StopStage",
			Handler:    _MeasurementApi_StopStage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// CtApiClient is the client API for CtApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CtApiClient interface {
	StoreLogEntries(ctx context.Context, opts ...grpc.CallOption) (CtApi_StoreLogEntriesClient, error)
	GetLastDBEntry(ctx context.Context, in *KnownLogURL, opts ...grpc.CallOption) (*Index, error)
}

type ctApiClient struct {
	cc *grpc.ClientConn
}

func NewCtApiClient(cc *grpc.ClientConn) CtApiClient {
	return &ctApiClient{cc}
}

func (c *ctApiClient) StoreLogEntries(ctx context.Context, opts ...grpc.CallOption) (CtApi_StoreLogEntriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CtApi_serviceDesc.Streams[0], "/CtApi/StoreLogEntries", opts...)
	if err != nil {
		return nil, err
	}
	x := &ctApiStoreLogEntriesClient{stream}
	return x, nil
}

type CtApi_StoreLogEntriesClient interface {
	Send(*LogEntryBatch) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type ctApiStoreLogEntriesClient struct {
	grpc.ClientStream
}

func (x *ctApiStoreLogEntriesClient) Send(m *LogEntryBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ctApiStoreLogEntriesClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ctApiClient) GetLastDBEntry(ctx context.Context, in *KnownLogURL, opts ...grpc.CallOption) (*Index, error) {
	out := new(Index)
	err := c.cc.Invoke(ctx, "/CtApi/GetLastDBEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CtApiServer is the server API for CtApi service.
type CtApiServer interface {
	StoreLogEntries(CtApi_StoreLogEntriesServer) error
	GetLastDBEntry(context.Context, *KnownLogURL) (*Index, error)
}

// UnimplementedCtApiServer can be embedded to have forward compatible implementations.
type UnimplementedCtApiServer struct {
}

func (*UnimplementedCtApiServer) StoreLogEntries(srv CtApi_StoreLogEntriesServer) error {
	return status.Errorf(codes.Unimplemented, "method StoreLogEntries not implemented")
}
func (*UnimplementedCtApiServer) GetLastDBEntry(ctx context.Context, req *KnownLogURL) (*Index, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastDBEntry not implemented")
}

func RegisterCtApiServer(s *grpc.Server, srv CtApiServer) {
	s.RegisterService(&_CtApi_serviceDesc, srv)
}

func _CtApi_StoreLogEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CtApiServer).StoreLogEntries(&ctApiStoreLogEntriesServer{stream})
}

type CtApi_StoreLogEntriesServer interface {
	Send(*Result) error
	Recv() (*LogEntryBatch, error)
	grpc.ServerStream
}

type ctApiStoreLogEntriesServer struct {
	grpc.ServerStream
}

func (x *ctApiStoreLogEntriesServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ctApiStoreLogEntriesServer) Recv() (*LogEntryBatch, error) {
	m := new(LogEntryBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CtApi_GetLastDBEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KnownLogURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtApiServer).GetLastDBEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CtApi/GetLastDBEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtApiServer).GetLastDBEntry(ctx, req.(*KnownLogURL))
	}
	return interceptor(ctx, in, info, handler)
}

var _CtApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CtApi",
	HandlerType: (*CtApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLastDBEntry",
			Handler:    _CtApi_GetLastDBEntry_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StoreLogEntries",
			Handler:       _CtApi_StoreLogEntries_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}

// ZoneFileApiClient is the client API for ZoneFileApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZoneFileApiClient interface {
	StoreZoneEntry(ctx context.Context, opts ...grpc.CallOption) (ZoneFileApi_StoreZoneEntryClient, error)
	GetStartTime(ctx context.Context, in *Interval, opts ...grpc.CallOption) (*StartTime, error)
}

type zoneFileApiClient struct {
	cc *grpc.ClientConn
}

func NewZoneFileApiClient(cc *grpc.ClientConn) ZoneFileApiClient {
	return &zoneFileApiClient{cc}
}

func (c *zoneFileApiClient) StoreZoneEntry(ctx context.Context, opts ...grpc.CallOption) (ZoneFileApi_StoreZoneEntryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ZoneFileApi_serviceDesc.Streams[0], "/ZoneFileApi/StoreZoneEntry", opts...)
	if err != nil {
		return nil, err
	}
	x := &zoneFileApiStoreZoneEntryClient{stream}
	return x, nil
}

type ZoneFileApi_StoreZoneEntryClient interface {
	Send(*ZoneEntryBatch) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type zoneFileApiStoreZoneEntryClient struct {
	grpc.ClientStream
}

func (x *zoneFileApiStoreZoneEntryClient) Send(m *ZoneEntryBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zoneFileApiStoreZoneEntryClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zoneFileApiClient) GetStartTime(ctx context.Context, in *Interval, opts ...grpc.CallOption) (*StartTime, error) {
	out := new(StartTime)
	err := c.cc.Invoke(ctx, "/ZoneFileApi/GetStartTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZoneFileApiServer is the server API for ZoneFileApi service.
type ZoneFileApiServer interface {
	StoreZoneEntry(ZoneFileApi_StoreZoneEntryServer) error
	GetStartTime(context.Context, *Interval) (*StartTime, error)
}

// UnimplementedZoneFileApiServer can be embedded to have forward compatible implementations.
type UnimplementedZoneFileApiServer struct {
}

func (*UnimplementedZoneFileApiServer) StoreZoneEntry(srv ZoneFileApi_StoreZoneEntryServer) error {
	return status.Errorf(codes.Unimplemented, "method StoreZoneEntry not implemented")
}
func (*UnimplementedZoneFileApiServer) GetStartTime(ctx context.Context, req *Interval) (*StartTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStartTime not implemented")
}

func RegisterZoneFileApiServer(s *grpc.Server, srv ZoneFileApiServer) {
	s.RegisterService(&_ZoneFileApi_serviceDesc, srv)
}

func _ZoneFileApi_StoreZoneEntry_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZoneFileApiServer).StoreZoneEntry(&zoneFileApiStoreZoneEntryServer{stream})
}

type ZoneFileApi_StoreZoneEntryServer interface {
	Send(*Result) error
	Recv() (*ZoneEntryBatch, error)
	grpc.ServerStream
}

type zoneFileApiStoreZoneEntryServer struct {
	grpc.ServerStream
}

func (x *zoneFileApiStoreZoneEntryServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zoneFileApiStoreZoneEntryServer) Recv() (*ZoneEntryBatch, error) {
	m := new(ZoneEntryBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ZoneFileApi_GetStartTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneFileApiServer).GetStartTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ZoneFileApi/GetStartTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneFileApiServer).GetStartTime(ctx, req.(*Interval))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZoneFileApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ZoneFileApi",
	HandlerType: (*ZoneFileApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStartTime",
			Handler:    _ZoneFileApi_GetStartTime_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StoreZoneEntry",
			Handler:       _ZoneFileApi_StoreZoneEntry_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}

// SplunkApiClient is the client API for SplunkApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SplunkApiClient interface {
	StorePassiveEntry(ctx context.Context, opts ...grpc.CallOption) (SplunkApi_StorePassiveEntryClient, error)
}

type splunkApiClient struct {
	cc *grpc.ClientConn
}

func NewSplunkApiClient(cc *grpc.ClientConn) SplunkApiClient {
	return &splunkApiClient{cc}
}

func (c *splunkApiClient) StorePassiveEntry(ctx context.Context, opts ...grpc.CallOption) (SplunkApi_StorePassiveEntryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SplunkApi_serviceDesc.Streams[0], "/SplunkApi/StorePassiveEntry", opts...)
	if err != nil {
		return nil, err
	}
	x := &splunkApiStorePassiveEntryClient{stream}
	return x, nil
}

type SplunkApi_StorePassiveEntryClient interface {
	Send(*SplunkEntryBatch) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type splunkApiStorePassiveEntryClient struct {
	grpc.ClientStream
}

func (x *splunkApiStorePassiveEntryClient) Send(m *SplunkEntryBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *splunkApiStorePassiveEntryClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SplunkApiServer is the server API for SplunkApi service.
type SplunkApiServer interface {
	StorePassiveEntry(SplunkApi_StorePassiveEntryServer) error
}

// UnimplementedSplunkApiServer can be embedded to have forward compatible implementations.
type UnimplementedSplunkApiServer struct {
}

func (*UnimplementedSplunkApiServer) StorePassiveEntry(srv SplunkApi_StorePassiveEntryServer) error {
	return status.Errorf(codes.Unimplemented, "method StorePassiveEntry not implemented")
}

func RegisterSplunkApiServer(s *grpc.Server, srv SplunkApiServer) {
	s.RegisterService(&_SplunkApi_serviceDesc, srv)
}

func _SplunkApi_StorePassiveEntry_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SplunkApiServer).StorePassiveEntry(&splunkApiStorePassiveEntryServer{stream})
}

type SplunkApi_StorePassiveEntryServer interface {
	Send(*Result) error
	Recv() (*SplunkEntryBatch, error)
	grpc.ServerStream
}

type splunkApiStorePassiveEntryServer struct {
	grpc.ServerStream
}

func (x *splunkApiStorePassiveEntryServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *splunkApiStorePassiveEntryServer) Recv() (*SplunkEntryBatch, error) {
	m := new(SplunkEntryBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SplunkApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SplunkApi",
	HandlerType: (*SplunkApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StorePassiveEntry",
			Handler:       _SplunkApi_StorePassiveEntry_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}

// EntradaApiClient is the client API for EntradaApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EntradaApiClient interface {
	StoreEntradaEntry(ctx context.Context, opts ...grpc.CallOption) (EntradaApi_StoreEntradaEntryClient, error)
}

type entradaApiClient struct {
	cc *grpc.ClientConn
}

func NewEntradaApiClient(cc *grpc.ClientConn) EntradaApiClient {
	return &entradaApiClient{cc}
}

func (c *entradaApiClient) StoreEntradaEntry(ctx context.Context, opts ...grpc.CallOption) (EntradaApi_StoreEntradaEntryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EntradaApi_serviceDesc.Streams[0], "/EntradaApi/StoreEntradaEntry", opts...)
	if err != nil {
		return nil, err
	}
	x := &entradaApiStoreEntradaEntryClient{stream}
	return x, nil
}

type EntradaApi_StoreEntradaEntryClient interface {
	Send(*EntradaEntryBatch) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type entradaApiStoreEntradaEntryClient struct {
	grpc.ClientStream
}

func (x *entradaApiStoreEntradaEntryClient) Send(m *EntradaEntryBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *entradaApiStoreEntradaEntryClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EntradaApiServer is the server API for EntradaApi service.
type EntradaApiServer interface {
	StoreEntradaEntry(EntradaApi_StoreEntradaEntryServer) error
}

// UnimplementedEntradaApiServer can be embedded to have forward compatible implementations.
type UnimplementedEntradaApiServer struct {
}

func (*UnimplementedEntradaApiServer) StoreEntradaEntry(srv EntradaApi_StoreEntradaEntryServer) error {
	return status.Errorf(codes.Unimplemented, "method StoreEntradaEntry not implemented")
}

func RegisterEntradaApiServer(s *grpc.Server, srv EntradaApiServer) {
	s.RegisterService(&_EntradaApi_serviceDesc, srv)
}

func _EntradaApi_StoreEntradaEntry_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EntradaApiServer).StoreEntradaEntry(&entradaApiStoreEntradaEntryServer{stream})
}

type EntradaApi_StoreEntradaEntryServer interface {
	Send(*Result) error
	Recv() (*EntradaEntryBatch, error)
	grpc.ServerStream
}

type entradaApiStoreEntradaEntryServer struct {
	grpc.ServerStream
}

func (x *entradaApiStoreEntradaEntryServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *entradaApiStoreEntradaEntryServer) Recv() (*EntradaEntryBatch, error) {
	m := new(EntradaEntryBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EntradaApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "EntradaApi",
	HandlerType: (*EntradaApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StoreEntradaEntry",
			Handler:       _EntradaApi_StoreEntradaEntry_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
