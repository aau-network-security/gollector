package czds

import (
	"errors"
	zone2 "github.com/aau-network-security/gollector/collectors/zone"
	tst "github.com/aau-network-security/gollector/testing"
	"github.com/rs/zerolog/log"
	"os"
	"testing"
)

func TestProcess(t *testing.T) {
	tst.SkipCI(t)

	user := os.Getenv("CZDS_USER")
	pass := os.Getenv("CZDS_PASS")
	cred := Credentials{
		Username: user,
		Password: pass,
	}
	auth := NewAuthenticator(cred)
	z := New(auth, "net")

	count := 0
	f := func(domain []byte) error {
		log.Debug().Msgf("%s", domain)
		count++
		return errors.New("error generated by test")
	}

	opts := zone2.ProcessOpts{
		DomainFn:       f,
		StreamWrappers: []zone2.StreamWrapper{zone2.GzipWrapper},
		StreamHandler:  zone2.ZoneFileHandler,
	}

	if err := zone2.Process(z, opts); err != nil && count != 1 {
		t.Fatalf("error while processing zone: %s", err)
	}

}
