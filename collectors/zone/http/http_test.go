package http

import (
	"errors"
	zone2 "github.com/aau-network-security/gollector/collectors/zone"
	ssh2 "github.com/aau-network-security/gollector/collectors/zone/ssh"
	tst "github.com/aau-network-security/gollector/testing"
	"github.com/rs/zerolog/log"
	"os"
	"testing"
)

func TestHttp(t *testing.T) {
	tst.SkipCI(t)

	sshConf := ssh2.Config{
		Host:     "js3.es.aau.dk",
		User:     os.Getenv("AAU_USER"),
		AuthType: "password",
		Password: os.Getenv("AAU_PASS"),
	}

	httpConf := Config{
		Url: "https://xn--domneliste-f6a.dk-hostmaster.dk/domainlist.txt",
	}

	httpClient, err := ssh2.HttpClient(sshConf)
	if err != nil {
		t.Fatalf("error while creating HTTP-over-SSH client: %s", err)
	}

	s, err := New(httpConf, httpClient)
	if err != nil {
		t.Fatalf("error while creating HTTP zone retriever: %s", err)
	}

	count := 0
	f := func(domain []byte) error {
		log.Debug().Msgf("%s", domain)
		count++
		return errors.New("error generated by test")
	}

	opts := zone2.ProcessOpts{
		DomainFn:       f,
		StreamWrappers: []zone2.StreamWrapper{},
		StreamHandler:  zone2.ListHandler,
	}

	if err := zone2.Process(s, opts); err != nil && count != 1 {
		t.Fatalf("error while processing zone: %s", err)
	}
}
